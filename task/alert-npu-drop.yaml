apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-npu-drop
    namespace: ops-system
spec:
    desc: use task `alert-npu-drop` to check npu drop in specified host
    crontab: "*/10 * * * *"
    selector:
        alert-npu-drop: enabled
    typeRef: host
    variables:
        cluster: "default"
        desired_card_count: "16"
        notifaction: "https://xz.wps.cn/api/v1/webhook/send?key="
    steps:
        - name: alert-npu-drop
          content: |
              #!/usr/bin/python
              import os
              import subprocess
              import requests
              import json
              from datetime import datetime

              cluster = '${cluster}'
              hostname = '${hostname}'
              notifaction = '${notifaction}'
              desired_card_count = int('${desired_card_count}')

              card_id = ''
              reason = '掉卡'

              def send(message):
                  payload = {
                      'msgtype': 'text',
                      'text': {
                          'content': message
                      }
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.request('POST', notifaction, headers=headers, data=json.dumps(payload))
                  print(response.text)

              def build_error_message(message, card_id=''):
                  if card_id == '':
                      return f'异常信息: {message}\n'
                  return f'异常位置: {card_id}\n异常信息: {message}\n'

              try:
                  # 1. check npu-smi exists /usr/local/bin/npu-smi
                  if not os.path.exists('/usr/local/bin/npu-smi'):
                      raise Exception(build_error_message('找不到 npu-smi 命令'))
                  # 2. check count from npu-smi
                  # npu-smi info |grep 910
                  output = subprocess.check_output(['/usr/local/bin/npu-smi', 'info'], universal_newlines=True)
                  card_count = 0
                  error_message = ''
                  lines = [line for line in output.split('\n') if '910B' in line]
                  for _, line in enumerate(lines):
                      line = line.strip()
                      if 'OK' in line:
                          card_count += 1
                      else:
                          error_message += build_error_message(line, card_count)
                  if card_count != desired_card_count:
                      raise Exception(error_message)
                  # 3. lspci check, lspci |grep d80
                  output = subprocess.check_output(['lspci'], universal_newlines=True)
                  card_count = 0
                  error_message = ''
                  lines = [line for line in output.split('\n') if 'd80' in line]
                  for _, line in enumerate(lines):
                      line = line.strip()
                      if 'Huawei' in line:
                          card_count += 1
                  if card_count != desired_card_count:
                      error_message = build_error_message('npu count mismatch: %d (desired %d)' % (card_count, desired_card_count))
                      raise Exception(error_message)
              except Exception as e:
                  error_message += build_error_message(str(e))
              finally:
                  if len(error_message) > 0:
                      print(error_message)
                      error_message = f'集群: {cluster} \n节点: {hostname} \n{error_message}异常判断: {reason}\n'
                      send(error_message)
