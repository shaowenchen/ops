apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
  name: alert-gpu-drop-py
  namespace: ops-system
spec:
  desc: use task `alert-gpu-drop-py` to check gpu drop in specified host
  crontab: '*/10 * * * *'
  selector:
    alert-gpu-drop: enabled
  typeRef: host
  variables:
    desired_card_count: '8'
    notifaction: 'https://xz.wps.cn/api/v1/webhook/send?key='
  steps:
    - name: alert-card-drop
      content: |
        #!/usr/bin/python
        import os
        import subprocess
        import requests
        import json
        from datetime import datetime

        hostname = '${hostname}'
        notifaction = '${notifaction}'
        desired_card_count = int('${desired_card_count}')

        card_id = ''
        reason = '掉卡'

        def send(message):
            payload = {
                'msgtype': 'text',
                'text': {
                    'content': message
                }
            }
            headers = {
                'Content-Type': 'application/json'
            }
            response = requests.request('POST', notifaction, headers=headers, data=json.dumps(payload))
            print(response.text)

        def build_error_message(message, card_id=''):
            if card_id == '':
                return f'异常信息: {message}\n'
            return f'异常位置: {card_id}\n异常信息: {message}\n'

        try:
            # 1. check nvidia-smi exists /usr/bin/nvidia-sm
            if not os.path.exists('/usr/bin/nvidia-smi'):
                raise Exception(build_error_message('找不到 nvidia-smi 命令'))
            # 2. check count from nvidia-smi
            output = subprocess.check_output(['nvidia-smi' , '-L'], universal_newlines=True)
            card_count = 0
            error_message = ''
            lines = [line for line in output.split('\n') if line.startswith('GPU')]
            for index, line in enumerate(lines):
                line = line.strip()
                if line.startswith('GPU'):
                    card_count += 1
                elif len(line) > 0:
                    error_message += build_error_message(line, index)
            if card_count != desired_card_count:
                error_message += build_error_message('gpu count mismatch: %d (desired %d)' % (card_count, desired_card_count))
                raise Exception(error_message)
            # 3. lspci check
            output = subprocess.check_output(['lspci'], universal_newlines=True)
            card_count = 0
            error_message = ''
            lines = [line for line in output.split('\n') if 'controller: NVIDIA Corporation Device' in line]
            for index, line in enumerate(lines):
                line = line.strip()
                if 'NVIDIA' in line:
                    card_count += 1
                elif len(line) > 0:
                    error_message += build_error_message(line, index)
            if card_count != desired_card_count:
                error_message += build_error_message('gpu count mismatch: %d (desired %d)' % (card_count, desired_card_count))
                raise Exception(error_message)
        except Exception as e:
            error_message = str(e)
        finally:
            if len(error_message) > 0:
                error_message = f'节点: {hostname} \n{error_message}异常判断: {reason}\n'
                send(error_message)
