apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
  name: alert-npu-drop
  namespace: ops-system
spec:
    desc: check npu drop in specified host
    host: "alert-npu=enabled"
    steps:
        - name: alert-npu-drop
          content: |
              #!/usr/bin/python
              import os
              import subprocess
              import requests
              import json
              from datetime import datetime

              threshold = int('${card-num}')
              card_id = ''
              message = ''
              card_count = 0

              def send(status, message):
                  payload = {
                      'host': '${HOSTNAME}',
                      'kind': '${TASKRUN}',
                      'threshold': str(threshold),
                      'operator': '!=',
                      'status': status,
                      'value': str(card_count),
                      'message': message
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports.${HOSTNAME}', headers=headers, data=json.dumps(payload))
                  print(response.text)

              def build_message(message, card_id=''):
                  if card_id == '':
                      return f'{message}\n'
                  return f'异常位置: {card_id}\n异常信息: {message}\n'

              try:
                  # 1. check npu-smi exists /usr/local/bin/npu-smi
                  if not os.path.exists('/usr/local/bin/npu-smi'):
                      raise Exception(build_message('找不到 npu-smi 命令'))
                  # 2. check count from npu-smi
                  # npu-smi info |grep 910
                  output = subprocess.run(['/usr/local/bin/npu-smi', 'info'], universal_newlines=True, stdout=subprocess.PIPE).stdout
                  card_count = 0
                  lines = [line for line in output.split('\n') if '910B' in line]
                  for _, line in enumerate(lines):
                      line = line.strip()
                      if 'OK' in line:
                          card_count += 1
                      else:
                          message += build_message(line, card_count)
                  if card_count != threshold:
                      raise Exception(message)
                  # 3. lspci check, lspci |grep d80
                  output = subprocess.run(['lspci'], universal_newlines=True, stdout=subprocess.PIPE).stdout
                  card_count = 0
                  message = ''
                  lines = [line for line in output.split('\n') if 'd80' in line]
                  for _, line in enumerate(lines):
                      line = line.strip()
                      if 'Huawei' in line:
                          card_count += 1
                  if card_count != threshold:
                      raise Exception(message)
              except Exception as e:
                  if len(message) == 0:
                      message = str(e)
              finally:
                  if len(message) > 0:
                      send('alerting', message)
                  else:
                      send('normal', message)
