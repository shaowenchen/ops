apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-gpu-zombie
    namespace: ops-system
spec:
    desc: use task `alert-gpu-zombie` to check gpu
    crontab: "50 * * * *"
    selector:
        alert-gpu-zombie: enabled
    typeRef: host
    variables:
        cluster:
            default: default
        notifaction:
            default: https://xz.wps.cn/api/v1/webhook/send?key=
    steps:
        - name: alert-gpu-zombie
          content: |
              #!/usr/bin/python
              import os
              import subprocess
              import requests
              import json
              import time
              from datetime import datetime

              cluster = '${cluster}'
              hostname = '${hostname}'
              notifaction = '${notifaction}'
              error_message = ''

              card_id = ''
              reason = '显存使用异常'

              def send(message):
                  payload = {
                      'msgtype': 'text',
                      'text': {
                          'content': message
                      }
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.request('POST', notifaction, headers=headers, data=json.dumps(payload))
                  print(response.text)

              def build_error_message(message, card_id=''):
                  if card_id == '':
                      return f'异常信息: {message}\n'
                  return f'异常位置: {card_id}\n异常信息: {message}\n'

              try:
                  # 1. check nvidia-smi exists /usr/bin/nvidia-sm
                  if not os.path.exists('/usr/bin/nvidia-smi'):
                      raise Exception(build_error_message('找不到 nvidia-smi 命令'))
                  # 2. 
                  output = subprocess.check_output(['nvidia-smi' , '--query-compute-apps=process_name,pid,used_memory', '--format=csv,noheader,nounits'], universal_newlines=True)
                  lines = [line for line in output.split('\n')]
                  
                  # 3. check zombie
                  alertLines = []
                  for index, line in enumerate(lines):
                      line = line.strip()
                      if '[No data]' in line and line not in alertLines:
                          alertLines.append(line)
                  if len(alertLines) > 0:
                      for line in alertLines:
                          pid = line.split(', ')[1]
                          num = line.split(', ')[-1]
                          error_message += build_error_message('有僵尸进程 ' + pid + ' 占用显卡 ' + num + 'MB')
                  
              except Exception as e:
                  if len(error_message) == 0:
                      error_message = build_error_message(str(e))
              finally:
                  if len(error_message) > 0:
                      error_message = f'集群: {cluster} \n节点: {hostname} \n{error_message}异常判断: {reason}\n'
                      send(error_message)
