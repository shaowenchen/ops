apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-node-event
    namespace: ops-system
spec:
    desc: check node event alert specified keywords
    host: anymaster
    steps:
        - name: alert-node-event
          content: |
              #!/usr/bin/python
              import subprocess
              import requests
              import json

              keywords = ["NodeNotReady"]
              message = ""

              def send(status, message):
                  payload = {
                      "hostname": "${HOSTNAME}",
                      "kind": "${TASKRUN}",
                      "status": status,
                      "message": message,
                  }
                  headers = {"Content-Type": "application/json"}
                  response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports.${HOSTNAME}', headers=headers, data=json.dumps(payload))
                  print(response.text)


              def is_target_time(event_line):
                  parts = event_line.split()
                  if len(parts) > 2:
                      time_str = parts[2]
                      if "h" not in time_str:
                          if "m" in time_str:
                              mins = int(time_str.split("m")[0])
                              if mins < 5:
                                  return True
                          else:
                              return True
                  return False

              def parse_events(describe_output):
                  messageList = []
                  seen_keywords = set()

                  describe_output_lines = describe_output.splitlines()
                  len_describe = len(describe_output_lines)
                  for i in range(len_describe):
                      line = describe_output_lines[len_describe - i - 1]
                      if line.startswith("Events:"):
                          break

                      if line.strip() and is_target_time(line):
                          for keyword in keywords:
                              if keyword.lower() in line.lower() and keyword not in seen_keywords:
                                  messageList.append(line.strip())
                                  seen_keywords.add(keyword)
                                  break

                  return '\n'.join(messageList)

              def get_node_events_and_info(node_name):
                  cmd = ["kubectl", "describe", "node", node_name]
                  result = subprocess.run(
                      cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
                  )
                  if result.returncode != 0:
                      print(f"Error fetching node {node_name}: {result.stderr}")
                      return None
                  return result.stdout

              def get_schedulable_nodes():
                  cmd = ["kubectl", "get", "nodes", "-o", "jsonpath={.items[*].metadata.name}"]
                  result = subprocess.run(
                      cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
                  )
                  if result.returncode != 0:
                      print(f"Error fetching nodes: {result.stderr}")
                      return []
                  return result.stdout.split()

              try:
                  schedulable_nodes = get_schedulable_nodes()
                  for node_name in schedulable_nodes:
                      describe_output = get_node_events_and_info(node_name)
                      if describe_output:
                          event_errors = parse_events(describe_output)
                          if event_errors:
                              send("alerting", f"<br>- host: {node_name}<br>- events: {event_errors}")

              except Exception as e:
                  message = str(e)
                  send("alerting", message)
