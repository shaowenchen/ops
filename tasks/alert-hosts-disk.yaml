apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-hosts-disk
    namespace: ops-system
spec:
    desc: alert-hosts-disk
    host: anymaster
    variables:
        threshold:
            default: "84"
    steps:
        - name: alert-hosts-disk
          content: |
              #!/usr/bin/python
              import subprocess
              import requests
              import json
              import re
              from datetime import datetime, timedelta

              threshold = int('${threshold}')

              def send(status, message, host, value):
                  payload = {
                      'kind': '${TASKRUN}',
                      'type': 'TaskRunReport',
                      'status': status,
                      'message': message,
                      'host': host, 
                      'threshold': '${threshold}',
                      'operator': '>',
                      'value': value
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports.' + host,
                                          headers=headers, data=json.dumps(payload))
                  print(response.text)

              def get_all_hosts():
                  try:
                      cmd = "kubectl -n ops-system get hosts -o json"
                      result = subprocess.check_output(cmd, shell=True).decode('utf-8')
                      return json.loads(result)
                  except Exception as e:
                      print(f"Error: {e}")
                      return None

              def extract_disk_usage(disk_usage_str):
                  usage_percentages = re.findall(r'\d+%', disk_usage_str)
                  return [int(x.strip('%')) for x in usage_percentages]

              def check_disk_usage(host):
                  status = 'normal'
                  message = ''
                  node_name = host['status'].get('hostname', '')
                  value = ''
                  try:
                      disk_usage = host['status'].get('diskUsagePercent', '')
                      disk_usage_list = extract_disk_usage(disk_usage)

                      for i, usage in enumerate(disk_usage_list):
                          if usage > threshold:
                              message += (f"Disk {i + 1} usage {usage}% exceeds threshold {threshold}% on host {node_name}.")
                              status = 'alerting'
                              value = str(usage)
                  except KeyError as e:
                      print(f"KeyError: {e}")
                      message = f"Invalid data format for host {node_name}"
                      status = 'alerting'
                  
                  return status, message, node_name, value

              def main():
                  hosts_data = get_all_hosts()

                  if hosts_data and 'items' in hosts_data:
                      for host in hosts_data['items']:
                          if host['status']['heartStatus'] == 'Failed':
                              continue
                          status, message, node_name, value = check_disk_usage(host)
                          if status == 'alerting':
                              send(status, message, node_name, value)

              if __name__ == "__main__":
                  main()
