apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-pod-count-abnormal
    namespace: ops-system
spec:
    desc: alert cluster pod
    host: anymaster
    variables:
        threshold:
            default: "20"
    steps:
        - name: alert abnormal pod counts
          content: |
              #!/usr/bin/python
              import os
              import subprocess
              import requests
              import json
              from datetime import datetime

              message = ''
              threshold = int("${threshold}")

              abnormal_pods = []

              def send(status, message):
                  payload = {
                      'kind': '${TASKRUN}',
                      'type': 'TaskRunReport',
                      'threshold': str(threshold),
                      'operator': '>',
                      'value': len(abnormal_pods),
                      'status': status,
                      'message': message
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports', headers=headers, data=json.dumps(payload))
                  print(response.text)

              def get_pod_status():
                  cmd = ["kubectl", "get", "pods", "--all-namespaces", "-o", "json"]
                  result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                  if result.returncode != 0:
                      print(f"Error fetching pods: {result.stderr}")
                      return None
                  return json.loads(result.stdout)

              def count_abnormal_pods(pods):
                  abnormal_statuses = ['UnexpectedAdmissionError', 'ImagePullBackOff', 'CrashLoopBackOff', 'Error', 'ContainerStatusUnknown', 'Evicted', 'Terminating', 'OOMKilled']
                  abnormal_pods = []
                  for item in pods.get("items", []):
                      pod_name = item.get("metadata", {}).get("name")
                      pod_namespace = item.get("metadata", {}).get("namespace")
                      pod_status = item.get("status", {}).get("phase")
                      container_statuses = item.get("status", {}).get("containerStatuses", [])
                      
                      for container_status in container_statuses:
                          if container_status.get("state", {}).get("waiting", {}).get("reason") in abnormal_statuses:
                              abnormal_pods.append((pod_namespace, pod_name, container_status.get("state", {}).get("waiting", {}).get("reason")))
                          elif container_status.get("state", {}).get("terminated", {}).get("reason") in abnormal_statuses:
                              abnormal_pods.append((pod_namespace, pod_name, container_status.get("state", {}).get("terminated", {}).get("reason")))
                  
                  return abnormal_pods

              try:
                  pods = get_pod_status()
                  if pods:
                      abnormal_pods = count_abnormal_pods(pods)
                      if len(abnormal_pods) > threshold:
                          message += f"abnormal pod counts: {len(abnormal_pods)}\n"
                          for ns, pod, r in abnormal_pods:
                              message += f"{ns}/{pod} {r}\n"
              except Exception as e:
                  if len(message) == 0:
                      message = str(e)
              finally:
                  if len(message) > 0:
                      send('alerting', message)
                  else:
                      send('normal', '')
