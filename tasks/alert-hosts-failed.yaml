apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-hosts-failed
    namespace: ops-system
spec:
    desc: alert-hosts-failed
    host: anymaster
    steps:
        - name: alert-hosts-failed
          content: |
              #!/usr/bin/python
              import subprocess
              import requests
              import json
              import re
              from datetime import datetime, timedelta

              def send(status, message, host, value):
                  payload = {
                      'kind': '${TASKRUN}',
                      'type': 'TaskRunReport',
                      'status': status,
                      'message': message,
                      'host': host,
                      'threshold': 'Successed',
                      'operator': '!=',
                      'value': value
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports.' + host,
                                          headers=headers, data=json.dumps(payload))
                  print(response.text)

              def get_all_hosts():
                  try:
                      cmd = "kubectl -n ops-system get hosts -o json"
                      result = subprocess.check_output(cmd, shell=True).decode('utf-8')
                      return json.loads(result)
                  except Exception as e:
                      print(f"Error: {e}")
                      return None

              def main():
                  hosts_data = get_all_hosts()

                  if hosts_data and 'items' in hosts_data:
                      for host in hosts_data['items']:
                          if host['status']['heartStatus'] == 'Failed':
                              status = 'alerting'
                              message = f"Host {host['metadata']['name']} failed to report heart status."
                              send(status, message, host['metadata']['name'], 'Failed')
                          else:
                              status = 'normal'
                              message = f"Host {host['metadata']['name']} reported heart status successfully."
                              send(status, message, host['metadata']['name'], 'Successed')

              if __name__ == "__main__":
                  main()