apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-pod-status
    namespace: ops-system
spec:
    desc: check dataset
    host: anymaster
    variables:
        labels:
            required: true
            examples:
                - "role=juicefs-worker"
    steps:
        - name: alert-dataset-notready
          content: |
              #!/usr/bin/python
              import subprocess
              import requests
              import json
              import re
              from datetime import datetime, timedelta

              message = ''
              labels = "${labels}"
              statusList = ['Running', 'Succeeded', 'Completed']

              def send(status, message):
                  payload = {
                      'kind': '${TASKRUN}',
                      'type': 'TaskRunReport',
                      'status': status,
                      'message': message
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports', headers=headers, data=json.dumps(payload))
                  print(response.text)

              def get_pods():
                  try:
                      cmd = "kubectl get pod -A -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,STATUS:.status.phase,AGE:.metadata.creationTimestamp,NODE:.spec.nodeName -l " + labels
                      result = subprocess.check_output(cmd, shell=True).decode('utf-8')
                      return result
                  except:
                      return

              def parse_age(age_str):
                  return datetime.strptime(age_str, "%Y-%m-%dT%H:%M:%SZ")

              pod_data = get_pods()
              if pod_data:
                  lines = pod_data.split('\n')
                  current_time = datetime.utcnow()

                  for line in lines[1:]:
                      fields = line.split()
                      if len(fields) < 5:
                          continue
                      namespace = fields[0]
                      pod_name = fields[1]
                      status = fields[2]
                      age_str = fields[3]
                      node = fields[4]
                      
                      pod_age = parse_age(age_str)
                      age_seconds = (current_time - pod_age).total_seconds()
                      
                      if age_seconds > 300:
                          if status not in statusList:
                              message += f"\n{namespace}/{pod_name} {status} {age_str}"

              if message:
                  send('alerting', message)
              else:
                  send('normal', 'All pods are in ok state and younger than 5 minutes.')
