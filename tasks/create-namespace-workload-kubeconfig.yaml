apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
  name: create-namespace-workload-kubeconfig
  namespace: ops-system
spec:
  desc: create workload permission kubeconfig for namespace
  host: anymaster
  variables:
    namespace:
      required: true
  steps:
    - name: create kubeconfig 
      content: |
        export TARGET_NAMESPACE=${namespace}
        export SA_NAME="$TARGET_NAMESPACE-workload"
        
        # Create ServiceAccount
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: $SA_NAME
          namespace: $TARGET_NAMESPACE
        EOF
        
        # Create Role with workload permissions
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: namespace-workload-access
          namespace: $TARGET_NAMESPACE
        rules:
        - apiGroups: [""]
          resources: ["pods", "services", "pods/log", "pods/exec", "events", "configmaps", "secrets"]
          verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
        - apiGroups: [""]
          resources: ["persistentvolumeclaims"]
          verbs: ["get", "list"]
        - apiGroups: ["apps"]
          resources: ["deployments"]
          verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
        EOF
        
        # Create ClusterRole for namespace listing
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: list-namespaces
        rules:
        - apiGroups: [""]
          resources: ["namespaces"]
          verbs: ["list", "get", "watch"]
        EOF
        
        # Create RoleBinding
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: namespace-workload-access
          namespace: $TARGET_NAMESPACE
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: namespace-workload-access
        subjects:
        - kind: ServiceAccount
          name: $SA_NAME
          namespace: $TARGET_NAMESPACE
        EOF
        
        # Create ClusterRoleBinding
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: list-namespaces-$SA_NAME
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: list-namespaces
        subjects:
        - kind: ServiceAccount
          name: $SA_NAME
          namespace: $TARGET_NAMESPACE
        EOF
        
        # Create Service Account Token
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Secret
        metadata:
          name: $SA_NAME-token
          namespace: $TARGET_NAMESPACE
          annotations:
            kubernetes.io/service-account.name: $SA_NAME
        type: kubernetes.io/service-account-token
        EOF
        
        # Generate kubeconfig
        SA_TOKEN=$(kubectl -n $TARGET_NAMESPACE get secret $SA_NAME-token -o jsonpath='{.data.token}' | base64 -d)
        CURRENT_CONTEXT=$(kubectl config current-context)
        CLUSTER_NAME=$(kubectl config view --raw -o jsonpath='{.contexts[?(@.name=="'$CURRENT_CONTEXT'")].context.cluster}')
        CLUSTER_SERVER=$(kubectl config view --raw -o jsonpath='{.clusters[?(@.name=="'$CLUSTER_NAME'")].cluster.server}')
        
        cat > $TARGET_NAMESPACE-workload-kubeconfig.yaml << EOF
        apiVersion: v1
        kind: Config
        current-context: $CLUSTER_NAME
        clusters:
        - name: $CLUSTER_NAME
          cluster:
            server: $CLUSTER_SERVER
            insecure-skip-tls-verify: true
        contexts:
        - name: $CLUSTER_NAME
          context:
            cluster: $CLUSTER_NAME
            user: $SA_NAME
            namespace: $TARGET_NAMESPACE
        users:
        - name: $SA_NAME
          user:
            token: $SA_TOKEN
        EOF
        cat $TARGET_NAMESPACE-workload-kubeconfig.yaml