apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-gpu-ecc
    namespace: ops-system
spec:
    desc: check gpu drop in specified host
    host: "alert-gpu=enabled"
    variables:
        max:
            default: "1"
        cluster:
            default: default
        notifaction:
            required: true
    steps:
        - name: alert-card-ecc
          content: |
              #!/usr/bin/python
              import os
              import subprocess
              import requests
              import json
              from datetime import datetime

              cluster = '${cluster}'
              hostname = '${hostname}'
              notifaction = '${notifaction}'
              maxecc = int('${max}')

              reason = 'ECC'

              def send(status, message):
                  payload = {
                      'cluster': cluster,
                      'host': hostname,
                      'kind': 'alert-gpu-ecc',
                      'threshold': str(maxecc),
                      'operator': '==',
                      'status': status,
                      'message': message
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.request('POST', notifaction, headers=headers, data=json.dumps(payload))
                  print(response.text)

              def build_error_message(message, card_id=''):
                  if card_id == '':
                      return f'异常信息: {message}\n'
                  return f'异常位置: {card_id}\n异常信息: {message}\n'

              try:
                  # 1. check nvidia-smi exists /usr/bin/nvidia-sm
                  if not os.path.exists('/usr/bin/nvidia-smi'):
                      raise Exception(build_error_message('找不到 nvidia-smi 命令'))
                  # 2. check ecc from nvidia-smi
                  output = subprocess.run(['nvidia-smi'], universal_newlines=True, stdout=subprocess.PIPE).stdout
                  error_message = ''
                  lines = [line for line in output.split('\n') if "NVIDIA" in line and "Driver" not in line]
                  for index, line in enumerate(lines):
                      location = line.split(" ")[3]
                      ecc_count = line.split(" ")[-2]
                      if not ecc_count.isdigit():
                          continue
                      ecc_count = int(ecc_count)
                      if ecc_count > maxecc:
                          error_message += build_error_message(line, location)
              except Exception as e:
                  if len(error_message) == 0:
                      error_message = str(e)
              finally:
                  if len(error_message) > 0:
                      error_message = f'{error_message}{reason}'
                      send('alert', error_message)
                  else:
                      send('normal', error_message)
