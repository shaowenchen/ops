apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-hosts-mem
    namespace: ops-system
spec:
    desc: alert-hosts-mem
    host: anymaster
    variables:
        threshold:
            default: "84"
    steps:
        - name: alert-hosts-mem
          content: |
              #!/usr/bin/python
              import subprocess
              import requests
              import json
              import re
              from datetime import datetime, timedelta

              threshold = int('${threshold}')

              def send(status, message, host, value):
                  payload = {
                      'kind': '${TASKRUN}',
                      'type': 'TaskRunReport',
                      'status': status,
                      'message': message,
                      'host': host,
                      'threshold': '${threshold}',
                      'operator': '>',
                      'value': value
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports.' + host,
                                          headers=headers, data=json.dumps(payload))
                  print(response.text)

              def get_all_hosts():
                  try:
                      cmd = "kubectl -n ops-system get hosts -o json"
                      result = subprocess.check_output(cmd, shell=True).decode('utf-8')
                      return json.loads(result)
                  except Exception as e:
                      print(f"Error: {e}")
                      return None

              def check_mem_usage(host):
                  status = 'normal'
                  message = ''
                  value = ''
                  node_name = host['status'].get('hostname', '')
                  try:
                      mem_usage = host['status'].get('memUsagePercent', '')
                      mem_usage_int = int(mem_usage.strip('%').split('.')[0])

                      if mem_usage_int > threshold:
                        message += (f"Memory usage {mem_usage_int}% exceeds threshold {threshold}% on host {node_name}.")
                        status = 'alerting'
                        value = str(mem_usage_int)
                  except KeyError as e:
                      print(f"KeyError: {e}")
                      message = f"Invalid data format for host {node_name}"
                      status = 'alerting'

                  return status, message, node_name, value

              def main():
                  hosts_data = get_all_hosts()

                  if hosts_data and 'items' in hosts_data:
                      for host in hosts_data['items']:
                          if host['status']['heartStatus'] == 'Failed':
                              continue
                          status, message, node_name, value = check_mem_usage(host)
                          if status == 'alerting':
                              send(status, message, node_name, value)

              if __name__ == "__main__":
                  main()
