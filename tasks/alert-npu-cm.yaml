apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-npu-cm
    namespace: ops-system
spec:
    desc: check npu cm in specified host
    host: anymaster
    variables:
      cluster: 
        default: default
      notifaction: 
        required: true
    steps:
        - name: alert-npu-cm
          content: |
              #!/usr/bin/python
              import os
              import subprocess
              import requests
              import json
              from datetime import datetime

              cluster = '${cluster}'
              notifaction = '${notifaction}'

              error_message = ''
              reason = '设备注册'

              def send(status, message):
                  payload = {
                      'cluster': cluster,
                      'host': hostname,
                      'kind': 'alert-npu-cm',
                      'status': status,
                      'reason': message
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.request('POST', notifaction, headers=headers, data=json.dumps(payload))
                  print(response.text)

              def get_config_maps(namespace="kube-system"):
                  cmd = ["kubectl", "-n", namespace, "get", "cm", "-o", "json"]
                  result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                  if result.returncode != 0:
                      print(f"Error fetching config maps: {result.stderr}")
                      return None
                  return json.loads(result.stdout)

              def is_json(myjson):
                  try:
                      json.loads(myjson)
                  except ValueError:
                    return False
                  return True
              
              def get_schedulable_nodes():
                  cmd = ["kubectl", "get", "nodes", "-o", "json"]
                  result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                  if result.returncode != 0:
                      print(f"Error fetching nodes: {result.stderr}")
                      return []
                  nodes = json.loads(result.stdout)
                  schedulable_nodes = []
                  for item in nodes.get("items", []):
                      if item.get("spec", {}).get("unschedulable", False) == False:
                          schedulable_nodes.append(item["metadata"]["name"])
                  return schedulable_nodes

              def check_device_status(config_maps):
                  global error_message
                  schedulable_nodes = get_schedulable_nodes()
                  for item in config_maps.get("items", []):
                      cm_name = item.get("metadata", {}).get("name")
                      device_info_cfg = item.get("data", {}).get("DeviceInfoCfg")
                      if device_info_cfg:
                          device_info = json.loads(device_info_cfg)
                          device_list = device_info.get("DeviceInfo", {}).get("DeviceList", {})
                          for key, value in device_list.items():
                              if value and is_json(value) and len(json.loads(value)) > 0 and "Fault" in key:
                                  device = cm_name.split("deviceinfo-")[-1]
                                  if device in schedulable_nodes:
                                      error_message += f"Nodename: {device}, Status: {value}\n"
              try:
                  config_maps = get_config_maps()
                  if config_maps:
                      check_device_status(config_maps)
              except Exception as e:
                  if len(error_message) == 0:
                      error_message = str(e)
              finally:
                  if len(error_message) > 0:
                      error_message = f'集群: {cluster} \n{error_message}异常判断: {reason}\n'
                      send('alert', error_message)
                  else:
                      send('normal', error_message)
