apiVersion: crd.chenshaowen.com/v1
kind: Task
metadata:
    name: alert-dataset-notready
    namespace: ops-system
spec:
    desc: check dataset
    host: anymaster
    steps:
        - name: alert-dataset-notready
          content: |
              #!/usr/bin/python
              import subprocess
              import requests
              import json
              import time
              from datetime import datetime, timedelta

              def send(status, message):
                  payload = {
                      'kind': '${TASKRUN}',
                      'status': status,
                      'message': message
                  }
                  headers = {
                      'Content-Type': 'application/json'
                  }
                  response = requests.post('${OPSSERVER_ENDPOINT}/api/v1/namespaces/${NAMESPACE}/events/taskruns.${TASKRUN}.reports', headers=headers, data=json.dumps(payload))
                  print(response.text)

              try:
                  cmd = "kubectl get crd | grep dataset"
                  result = subprocess.check_output(cmd, shell=True).decode('utf-8')
                  if not result:
                      send('normal', 'dataset crd not found')
                      return
                  cmd = "kubectl get dataset -A"
                  result = subprocess.check_output(cmd, shell=True).decode('utf-8')
                  current_time = datetime.now()
                  lines = result.split('\n')
                  
                  for line in lines:
                      fields = line.split()
                      if len(fields) < 2:
                          print(line)
                          continue
                      namespace = fields[0]
                      name = fields[1]
                      phase = fields[-2]
                      age_str = fields[-1]
                      
                      skip = False
                      for field in fields:
                          if field == 'Bound':
                              skip = True
                              break
                      if skip:
                          continue
                      
                      age_time = current_time
                      if 'd' in age_str:
                          age_days = int(age_str.split('d')[0])
                          age_time = current_time - timedelta(days=age_days)
                      elif 'h' in age_str:
                          age_hours = int(age_str.split('h')[0])
                          age_time = current_time - timedelta(hours=age_hours)
                      elif 'm' in age_str:
                          age_minutes = int(age_str.split('m')[0])
                          age_time = current_time - timedelta(minutes=age_minutes)
                      if (current_time - age_time).total_seconds() > 300:
                          message = f"<br>- namespace: {namespace}<br>- dataset: {name}<br>- status: {phase} {age_str}"
                          send('alerting', message)

              except Exception as e:
                  send('alerting', str(e))
